import re

token_regex = [
  (re.compile(r"^HAI\b"), "Code Delimiter"),
  (re.compile(r"^KTHXBYE\b"), "Code Delimiter"),
  (re.compile(r"\bBTW\b"), "Single Comment"),
  (re.compile(r"\bOBTW\b"), "Multi-Line Start"),
  (re.compile(r"\bTLDR\b"), "Multi-Line End"),
  (re.compile(r"^I HAS A\b"), "Variable Declaration"),
  (re.compile(r"\bITZ\b"), "Variable Initialization"),
  (re.compile(r"^\bR\b"), "Variable Assignment"),
  (re.compile(r"\bSUM OF\b"), "Arithmetic (Add)"),
  (re.compile(r"^\bDIFF OF\b"), "Arithmetic (Sub)"),
  (re.compile(r"\bPRODUKT OF\b"), "Arithmetic (Mul)"),
  (re.compile(r"\bQUOSHUNT OF\b"), "Arithmetic (Div)"),
  (re.compile(r"\bMOD OF\b"), "Arithmetic_op (Modulo)"),
  (re.compile(r"\bBIGGR OF\b"), "Arithmetic (Max)"),
  (re.compile(r"\bSMALLR OF\b"), "Arithmetic (Min)"),
  (re.compile(r"\bBOTH OF\b"), "Boolean (And)"),
  (re.compile(r"\bEITHER OF\b"), "Boolean (Or)"),
  (re.compile(r"\bWON OF\b"), "Boolean (Xor)"),
  (re.compile(r"\bNOT\b"), "Boolean (Not)"),
  (re.compile(r"\bANY OF\b"), "Boolean (Infinite And)"),
  (re.compile(r"\bALL OF\b"), "Boolean (Infinite Or)"),
  (re.compile(r"\bBOTH SAEM\b"), "Comparison (Equals)"),
  (re.compile(r"\bDIFFRINT\b"), "Comparison (Not Equal)"),
  (re.compile(r"\bSMOOSH\b"), "String Concatenation"),
  (re.compile(r"\bMKAY\b"), "Infinite Arity Delimiter"),
  (re.compile(r"\bMAEK\b"), "Explicit Typecast"),
  (re.compile(r"\bA\b"), "A"),
  (re.compile(r"^\bIS NOW A\b"), "Re-cast"),
  (re.compile(r"^VISIBLE\b"), "Output"),
  (re.compile(r"\bGIMMEH\b"), "Input"),
  (re.compile(r"^O RLY\?\B"), "Start If-Else"),
  (re.compile(r"\bYA RLY\b"), "If Statement"),
  (re.compile(r"\bMEBBE\b"), "Else-If Statement"),
  (re.compile(r"\bNO WAI\b"), "Else Statement"),
  (re.compile(r"^OIC\b"), "Conditional Statement Delimiter"),
  (re.compile(r"^WTF\?\B"), "Start Switch"),
  (re.compile(r"\bOMG\b"), "Switch Case"),
  (re.compile(r"\bOMGWTF\b"), "Switch Default"),
  (re.compile(r"^IM IN YR\b"), "Loop Start"),
  (re.compile(r"\bUPPIN\b"), "Loop Incrementer"),
  (re.compile(r"\bNERFIN\b"), "Loop Incrementer"),
  (re.compile(r"^YR\b"), "Loop Variable Assignment"),
  (re.compile(r"\bTIL\b"), "Loop Until"),
  (re.compile(r"\bWILE\b"), "Loop While"),
  (re.compile(r"^IM OUTTA YR\b"), "Loop End"),
  (re.compile(r"\bAN\b"), "Value Separator"),
  (re.compile(r"\"[\w!@#$%^&*()_+=-\[\]\\/.,;'{}| ]*\""), "YARN Literal"),
  (re.compile(r"\bA (NOOB|NUMBR|NUMBAR|YARN|TROOF)\b"), "Type Literal"),
  (re.compile(r"\b-?\d+\b"), "NUMBR Literal"),
  (re.compile(r"\b-?\d*\.\d+\b"), "NUMBAR Literal"),
  (re.compile(r"\b(WIN|FAIL)\b"), "TROOF iteral"),
  (re.compile(r"^[A-Za-z][\w]*\b"), "Identifier")
]
