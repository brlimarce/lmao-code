import re

token_regex = [
  (re.compile(r"^HAI\b"), "HAI"),
  (re.compile(r"^KTHXBYE\b"), "KTHXBYE"),
  (re.compile(r"^BTW\b"), "BTW"),
  (re.compile(r"\bOBTW\b"), "OBTW"),
  (re.compile(r"\bTLDR\b"), "TLDR"),
  (re.compile(r"I HAS A\b"), "I HAS A"),
  (re.compile(r"\bITZ\b"), "ITZ"),
  (re.compile(r"^\bR\b"), "R"),
  (re.compile(r"\bSUM OF\b"), "SUM OF"),
  (re.compile(r"^\bIFF OF\b"), "DIFF OF"),
  (re.compile(r"\bPRODUKT OF\b"), "PRODUKT OF"),
  (re.compile(r"\bQUOSHUNT OF\b"), "QUOSHUNT OF"),
  (re.compile(r"\bMOD OF\b"), "MOD OF"),
  (re.compile(r"\bBIGGR OF\b"), "BIGGR OF"),
  (re.compile(r"\bSMALLR OF\b"), "SMALLR OF"),
  (re.compile(r"\bBOTH OF\b"), "BOTH OF"),
  (re.compile(r"\bEITHER OF\b"), "EITHER OF"),
  (re.compile(r"\bWON OF\b"), "WON OF"),
  (re.compile(r"\bNOT\b"), "NOT"),
  (re.compile(r"\bANY OF\b"), "ANY OF"),
  (re.compile(r"\bALL OF\b"), "ALL OF"),
  (re.compile(r"\bBOTH SAEM\b"), "BOTH SAEM"),
  (re.compile(r"\bDIFFRINT\b"), "DIFFRINT"),
  (re.compile(r"\bSMOOSH\b"), "SMOOSH"),
  (re.compile(r"\bMAEK\b"), "MAEK"),
  (re.compile(r"\bA\b"), "A"),
  (re.compile(r"^\bIS NOW A\b"), "IS NOW A"),
  (re.compile(r"^VISIBLE\b"), "VISIBLE"),
  (re.compile(r"\bGIMMEH\b"), "GIMMEH"),
  (re.compile(r"^O RLY\?\b"), "O RLY?"),
  (re.compile(r"\bYA RLY\b"), "YA RLY"),
  (re.compile(r"\bMEBBE\b"), "MEBBE"),
  (re.compile(r"\bNO WAI\b"), "NO WAI"),
  (re.compile(r"^OIC\b"), "OIC"),
  (re.compile(r"^WTF\?\b"), "WTF\?"),
  (re.compile(r"\bOMG\b"), "OMG"),
  (re.compile(r"\bOMGWTF\b"), "OMGWTF"),
  (re.compile(r"^IM IN YR\b"), "IM IN YR"),
  (re.compile(r"\bUPPIN\b"), "UPPIN"),
  (re.compile(r"\bNERFIN\b"), "NERFIN"),
  (re.compile(r"^YR\b"), "YR"),
  (re.compile(r"\bTIL\b"), "TIL"),
  (re.compile(r"\bWILE\b"), "WILE"),
  (re.compile(r"^IM OUTTA YR\b"), "IM OUTTA YR"),
  (re.compile(r"\bA (NOOB|NUMBR|NUMBAR|YARN|TROOF)\b"), "typepliteral"),
  (re.compile(r"\b(WIN|FAIL)\b"), "boolliteral"),
  (re.compile(r"\bAN\b"), "AN "),
  (re.compile(r"\b-?\d*\.\d+\b"), "floatliteral"),
  (re.compile(r"\b-?\d+\b"), "int"),
  # (re.compile(r"\b.*\b"), "string"), # ! Removing this since comments are disregarded.
  (re.compile(r"\b^[A-Za-z][\w]*\b"), "var/func/loop"),
  (re.compile(r"\b\"[^\"]*\"\b"), "stringliteral")
]