from api.utility import constants as const
import re

token_regex = [
  (re.compile(r"^HAI\b"), "hai"),
  (re.compile(r"^KTHXBYE\b"), "kthxbye"),
  (re.compile(r"\bBTW\b"), "Single Comment"),
  (re.compile(r"\bOBTW\b"), "Multi-Line Start"),
  (re.compile(r"\bTLDR\b"), "Multi-Line End"),
  (re.compile(r"^I HAS A\b"), "i has a"),
  (re.compile(r"\bITZ\b"), "itz"),
  (re.compile(r"^\bR\b"), "r"),
  (re.compile(r"\bSUM OF\b"), "add"),
  (re.compile(r"^\bDIFF OF\b"), "subtract"),
  (re.compile(r"\bPRODUKT OF\b"), "multiply"),
  (re.compile(r"\bQUOSHUNT OF\b"), "divide"),
  (re.compile(r"\bMOD OF\b"), "modulo"),
  (re.compile(r"\bBIGGR OF\b"), "maximize"),
  (re.compile(r"\bSMALLR OF\b"), "minimize"),
  (re.compile(r"\bBOTH OF\b"), "bool and"),
  (re.compile(r"\bEITHER OF\b"), "bool or"),
  (re.compile(r"\bWON OF\b"), "bool xor"),
  (re.compile(r"\bNOT\b"), "bool not"),
  (re.compile(r"\bANY OF\b"), "bool inf and"),
  (re.compile(r"\bALL OF\b"), "bool inf or"),
  (re.compile(r"\bBOTH SAEM\b"), "equal to"),
  (re.compile(r"\bDIFFRINT\b"), "not equal to"),
  (re.compile(r"\bSMOOSH\b"), "string concat"),
  (re.compile(r"\bMKAY\b"), "mkay"),
  (re.compile(r"\bMAEK\b"), "maek"),
  (re.compile(r"\bA\b"), "a"),
  (re.compile(r"^\bIS NOW A\b"), "is now a "),
  (re.compile(r"^VISIBLE\b"), "output"),
  (re.compile(r"\bGIMMEH\b"), "input"),
  (re.compile(r"^O RLY\?\B"), "start if-else"),
  (re.compile(r"\bYA RLY\b"), "if case"),
  (re.compile(r"\bMEBBE\b"), "else-if case"),
  (re.compile(r"\bNO WAI\b"), "else case"),
  (re.compile(r"^OIC\b"), "oic"),
  (re.compile(r"^WTF\?\B"), "start switch"),
  (re.compile(r"\bOMG\b"), "switch case"),
  (re.compile(r"\bOMGWTF\b"), "switch default"),
  (re.compile(r"^IM IN YR\b"), "loop start"),
  (re.compile(r"\bUPPIN\b"), "loop inc"),
  (re.compile(r"\bNERFIN\b"), "loop dec"),
  (re.compile(r"^YR\b"), "loop var assign"),
  (re.compile(r"\bTIL\b"), "loop until"),
  (re.compile(r"\bWILE\b"), "loop while"),
  (re.compile(r"^IM OUTTA YR\b"), "loop end"),
  (re.compile(r"\bGTFO\b"), "loop break"), #added this
  (re.compile(r"\bAN\b"), "an"),
  (re.compile(r"\"[\w!@#$%^&*()_+=-\[\]\\/.,;'{}| ]*\""), "YARN"),
  (re.compile(r"\bA (NOOB|NUMBR|NUMBAR|YARN|TROOF)\b"), "type literal"),
  (re.compile(r"\b-?\d+\b"), "literal"),
  (re.compile(r"\b-?\d*\.\d+\b"), "NUMBAR"),
  (re.compile(r"\b(WIN|FAIL)\b"), "TROOF"),
  (re.compile(r"^[A-Za-z][\w]*\b"), "identifier")
]

accepted_chars = [const.UNDERSCORE, ".", "?"]